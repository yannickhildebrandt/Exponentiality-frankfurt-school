import streamlit as st
import pandas as pd
import plotly.express as px

# ------------------------------------------------------
# Seiteneinstellungen & Formatierung (Page Settings & Styling)
# ------------------------------------------------------
st.set_page_config(
    layout="wide",
    page_title="Exponentielle Kr√§fte erleben",
    page_icon="üöÄ"
)

# Custom CSS f√ºr ein ansprechendes dunkles Theme und verbesserte Lesbarkeit
# Die Verwendung von unsafe_allow_html=True ist hier unkritisch,
# da der CSS-Inhalt statisch ist und nicht von Benutzereingaben stammt,
# wodurch kein Sicherheitsrisiko (z.B. XSS) entsteht.
st.markdown(
    """
    <style>
        /* BASE STYLES F√úR DEN GESAMTEN BODY */
        body {
            background: #10131a; /* Sehr dunkler Hintergrund f√ºr guten Kontrast */
            color: #f5f7fb; /* Standardtextfarbe: sehr helles Grau */
            font-family: 'Inter', 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif; /* Moderne, gut lesbare Sans-Serif-Schriften */
            line-height: 1.6; /* Verbesserter Zeilenabstand f√ºr bessere Lesbarkeit von Textbl√∂cken */
            font-size: 1rem; /* Basis-Schriftgr√∂√üe (oft 16px), gut lesbar */
        }
        
        /* Allgemeine Absatzstile f√ºr konsistente Lesbarkeit */
        p {
            line-height: 1.6; /* √úbernimmt Zeilenabstand vom Body, kann hier spezifisch angepasst werden */
            margin-bottom: 0.8em; /* Abstand zwischen Abs√§tzen f√ºr bessere Texttrennung */
        }

        /* STREAMLIT BLOCK CONTAINER OVERRIDES (Hauptinhaltsbereich) */
        .block-container {
            padding-top: 2rem;
            padding-bottom: 2rem;
            color: #f5f7fb; /* Stellt sicher, dass Text im Hauptinhaltsbereich hell ist */
        }

        /* SPEZIFISCHE TEXTELEMENTE & KOMPONENTEN */
        .headline-gradient {
            font-size: 3rem;
            font-weight: 800;
            background: -webkit-linear-gradient(120deg, #9be15d, #00c6ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-align: center;
            margin-bottom: 0.3rem;
        }
        .subheadline {
            text-align: center;
            font-size: 1.2rem;
            color: #d0d4e4; /* Helleres Grau, guter Kontrast */
            margin-bottom: 2rem;
        }
        .intro-card {
            background: linear-gradient(135deg, rgba(105,130,255,0.25), rgba(0,28,70,0.55));
            border-radius: 16px;
            padding: 1.1rem 1.6rem;
            margin-bottom: 1.2rem;
            box-shadow: 0 12px 35px rgba(0,0,0,0.35);
        }
        .story-card {
            background: linear-gradient(135deg, rgba(180,192,255,0.16), rgba(55,76,128,0.12));
            border-radius: 18px;
            padding: 1.5rem 2rem;
            box-shadow: 0 14px 45px rgba(15, 32, 67, 0.35);
            margin-bottom: 1.5rem;
            color: #f5f7fb;
        }
        .story-quote {
            font-style: italic;
            color: #d8def2; /* Leicht bl√§uliches Hellgrau f√ºr Zitate */
        }
        .metric-container .stMetric {
            background: rgba(10,15,25,0.75);
            border-radius: 16px;
            padding: 1.1rem;
            box-shadow: inset 0 0 0 1px rgba(155,225,93,0.25);
            color: #f5f7fb; /* Sicherstellen, dass Metrik-Werte hell sind */
        }
        .footer-message {
            text-align: center;
            font-size: 1.15rem;
            color: #9be15d; /* Helles Gr√ºn, guter Kontrast und Akzentfarbe */
            font-weight: 600;
        }

        /* BILDER UND BILDUNTERSCHRIFTEN */
        .image-frame {
            width: 100%;
            padding-top: 56%; /* Beh√§lt ein Seitenverh√§ltnis von ca. 16:9 bei */
            border-radius: 18px;
            background-size: cover;
            background-position: center;
            box-shadow: 0 18px 45px rgba(0,0,0,0.45);
            margin-bottom: 0.6rem;
        }
        .image-caption {
            text-align: center;
            font-size: 1rem; /* Leicht erh√∂ht f√ºr bessere Lesbarkeit von Captions */
            color: #d0d4e4; /* Helleres Grau, guter Kontrast */
            margin-bottom: 1.5rem;
            line-height: 1.4; /* Etwas strafferer Zeilenabstand f√ºr Captions */
        }

        /* STREAMLIT SPEZIFISCHE KOMPONENTEN (ANPASSUNGEN F√úR LESBARKEIT) */
        .st-expander {
            background: rgba(15, 25, 42, 0.65);
            border-radius: 0.5rem; /* Runde Ecken passend zu anderen Komponenten */
            border: 1px solid rgba(155,225,93,0.15); /* Dezenter Rahmen */
        }
        .st-expander details {
            padding: 0.5rem 1rem;
            color: #f5f7fb; /* Farbe des Summary-Textes im Expander */
        }
        .st-expander details summary::marker {
            color: #9be15d; /* Farbe des Auf-/Zuklappfeils */
        }
        /* Sicherstellen, dass der Inhalt innerhalb des Expanders auch gut lesbar ist */
        .streamlit-expanderContent {
            color: #f5f7fb; /* Textfarbe f√ºr den Inhalt des Expanders */
            line-height: 1.6; /* Konsistenter Zeilenabstand */
            padding: 0.5rem 1rem 1rem; /* Innenabstand */
        }

        /* Anpassung f√ºr Streamlit's Standard-Captions (z.B. von st.caption) */
        /* Targets Streamlit's internal CSS structure for captions. May need adjustment with Streamlit updates. */
        div[data-testid="caption"] p, /* H√§ufig verwendeter Selector f√ºr st.caption */
        .st-emotion-cache-1wv0jxv.e1nzilhr0 { /* Fallback f√ºr Streamlit's generierte Klassen */
            font-size: 0.95rem !important; /* Etwas gr√∂√üer als Streamlit's Standard (ca. 0.875rem) */
            color: #d0d4e4 !important; /* Sicherstellen, dass Captions hell genug sind */
            line-height: 1.4 !important; /* Etwas straffer f√ºr Captions */
        }

        /* Anpassung f√ºr st.info, st.success, st.warning Texte */
        .stAlert {
            font-size: 1rem; /* Konsistente Schriftgr√∂√üe f√ºr Alerts */
            line-height: 1.5; /* Angepasster Zeilenabstand f√ºr Alerts */
        }

    </style>
    """,
    unsafe_allow_html=True # Notwendig zum Injizieren von benutzerdefiniertem CSS
)

# ------------------------------------------------------
# Hilfsfunktionen (Helper Functions)
# ------------------------------------------------------

def format_number(value: float, decimals: int = 0) -> str:
    """
    Formatiert eine Zahl mit Tausender-Trennzeichen und Dezimalstellen,
    unter Verwendung des deutschen Lokals (Komma f√ºr Dezimal, Punkt f√ºr Tausender).

    Args:
        value (float): Die zu formatierende Zahl.
        decimals (int): Anzahl der Dezimalstellen. Standardwert ist 0.

    Returns:
        str: Die formatierte Zahl als String.
    """
    # Ersetzt Tausender-Trennzeichen (Komma) durch X, Dezimalpunkt durch Komma, X wieder durch Punkt
    return f"{value:,.{decimals}f}".replace(",", "X").replace(".", ",").replace("X", ".")

def human_number(value: float) -> str:
    """
    Formatiert eine Zahl in einen menschenlesbaren String mit Suffixen (z.B. Mio., Mrd.).
    Verwendet deutsches Zahlenformat.

    Args:
        value (float): Die zu formatierende Zahl.

    Returns:
        str: Die menschenlesbare Zahl als String.
    """
    thresholds = [
        (1e12, " Bio."),
        (1e9,  " Mrd."),
        (1e6,  " Mio."),
        (1e3,  " Tsd.")
    ]
    for threshold, suffix in thresholds:
        if abs(value) >= threshold:
            formatted = value / threshold
            return f"{formatted:,.1f}".replace(",", "X").replace(".", ",").replace("X", ".") + suffix
    return f"{value:,.0f}".replace(",", "X").replace(".", ",").replace("X", ".")

def best_comparison(value: float, comparison_list: list[tuple[str, float]]) -> str:
    """
    Vergleicht einen Wert mit einer Liste von Referenzwerten und gibt den am besten
    passenden Vergleichsstring zur√ºck (z.B. "5.2√ó Eiffelturm").

    Args:
        value (float): Der zu vergleichende Wert.
        comparison_list (list[tuple[str, float]]): Eine Liste von Tupeln, wobei jedes Tupel
                                                    (Bezeichnung: str, Referenzwert: float) enth√§lt.

    Returns:
        str: Ein Vergleichsstring.
    """
    if value <= 0:
        label, _= comparison_list[0]
        return f"0√ó {label}" # Bei Null oder negativen Werten, 0 mal die kleinste Einheit zur√ºckgeben
    
    # Vergleichsliste nach Referenzwert sortieren, um die beste √úbereinstimmung zu finden
    comparison_list = sorted(comparison_list, key=lambda x: x[1])

    # Von der gr√∂√üten zur kleinsten Referenz iterieren
    for label, ref in reversed(comparison_list):
        if value >= ref:
            factor = value / ref
            return f"{format_number(factor, 1)}√ó {label}"
    
    # Wenn der Wert kleiner als alle Referenzen ist, mit der kleinsten vergleichen
    label, ref = comparison_list[0]
    factor = value / ref
    return f"{format_number(factor, 1)}√ó {label}"

# ------------------------------------------------------
# UI-Hilfskomponenten (UI Helper Components)
# Abstraktion f√ºr h√§ufige UI-Muster zur Verbesserung der Lesbarkeit und Konsistenz.
# ------------------------------------------------------

def render_cover_image(url: str, caption: str):
    """
    Rendert ein gestyltes Titelbild mit Bildunterschrift.

    Args:
        url (str): Die URL des Bildes.
        caption (str): Die Bildunterschrift.
    """
    # HTML ist hartcodiert und kontrolliert, daher hier sicher.
    st.markdown(
        f"""
        <div class="image-frame" style="background-image: url('{url}');"></div>
        <p class="image-caption">{caption}</p>
        """,
        unsafe_allow_html=True
    )

def render_intro_card(text: str):
    """
    Rendert einen Einf√ºhrungstextblock in einer gestylten Karte.

    Args:
        text (str): Der Textinhalt f√ºr die Einf√ºhrungskarte.
    """
    # HTML ist hartcodiert und kontrolliert, daher hier sicher.
    st.markdown(f"<div class='intro-card'><p>{text}</p></div>", unsafe_allow_html=True) # Text in p-Tag f√ºr Zeilenabstand

def render_story_card(text: str):
    """
    Rendert einen Story-Textblock in einer gestylten Karte.

    Args:
        text (str): Der Textinhalt f√ºr die Story-Karte. Kann HTML f√ºr Zitate usw. enthalten.
    """
    # HTML ist hartcodiert und kontrolliert, daher hier sicher.
    st.markdown(f"<div class='story-card'>{text}</div>", unsafe_allow_html=True)

# ------------------------------------------------------
# Konstanten (Constants)
# H√§ufig verwendete oder konfigurations√§hnliche Werte zentralisieren.
# ------------------------------------------------------

# Bild-URLs f√ºr bessere Organisation
IMAGE_URLS = {
    "schachbrett": "https://i.postimg.cc/gjrmYdF2/pierre-bamin-Ldilh-Dx3sk-unsplash.jpg",
    "zinseszins": "https://i.postimg.cc/ZRR1Ncf3/andre-taissin-5OUMf1Mr5p-U-unsplash.jpg",
    "viral": "https://i.postimg.cc/76jwYdxh/fusion-medical-animation-rnr8D3FNUNY-unsplash.jpg",
    "saas": "https://i.postimg.cc/BbWfGFgr/austin-distel-rxp-Th-Owu-Vg-E-unsplash.jpg",
    "hero": "https://images.unsplash.com/photo-1545239351-1141bd82e8a6?auto=format&fit=crop&w=1600&q=80"
}

# ------------------------------------------------------
# Hero-Bereich (Hero Section)
# ------------------------------------------------------
st.markdown('<div class="headline-gradient">Exponentielle Kr√§fte erleben</div>', unsafe_allow_html=True)
st.markdown(
    '<div class="subheadline">'
    'Vier immersive Geschichten, die Exponentialit√§t emotional erfahrbar machen.'
    '</div>',
    unsafe_allow_html=True
)

hero_col1, hero_col2 = st.columns([5, 4])
with hero_col1:
    render_story_card(
        """
        <p class="story-quote">
        ‚ÄûIn meinen ersten Semestern dachte ich, 20‚ÄØ% Wachstum klingt nett ‚Äì heute wei√ü ich, dass es ganze Gesch√§ftsmodelle sprengt.‚Äú
        </p>
        <p>
        Genau dieses Aha-Erlebnis liefern wir: vom legend√§ren Schachbrett √ºber Zinseszins und virale Netzwerke bis zum Hypergrowth eines SaaS-Startups.
        Jedes Modul erz√§hlt eine Szene, visualisiert Daten und verankert das Mindset hinter exponentiellen Prozessen.
        </p>
        """
    )
with hero_col2:
    render_cover_image(
        IMAGE_URLS["hero"],
        "Wenn Wachstum explodiert, ver√§ndern sich Welten."
    )
st.markdown("---")

# Tabs zur Navigation zwischen den Geschichten
tab1, tab2, tab3, tab4 = st.tabs([
    "üåæ Schachbrett-Legende",
    "üí∞ Zinseszins vs. Zeit",
    "üåê Viraler Dominoeffekt",
    "üöÄ SaaS-Hypergrowth"
])

# ------------------------------------------------------
# Tab 1: Schachbrett-Legende
# ------------------------------------------------------
with tab1:
    render_intro_card(
        "Am Morgen der Audienz tritt ein Gelehrter vor den K√∂nig und pr√§sentiert das Schachspiel. "
        "Als Belohnung verlangt er nur Reis auf den Feldern des Brettes ‚Äì jedes Mal doppelt so viel wie zuvor. "
        "Der Hof schmunzelt, ahnt aber nicht, dass diese Verdopplung das Reich an den Rand der Kapitulation bringt."
    )
    render_cover_image(
        IMAGE_URLS["schachbrett"],
        "Reis, soweit das Auge reicht ‚Äì und doch nur ein Vorgeschmack auf Exponentialit√§t."
    )
    render_story_card(
        """
        In alten Chroniken hei√üt es, der K√∂nig lachte √ºber den ‚Äûbescheidenen‚Äú Wunsch nach verdoppelten Reisk√∂rnern pro Feld.
        Doch nach wenigen Reihen f√ºllten sich Scheunen, Speicher und schlie√ülich ganze St√§dte. Erst dann begriff der Hof,
        welche Macht in einer einfachen Verdopplung steckt.
        """
    )

    col1, col2 = st.columns([1, 2], gap="large")
    with col1:
        st.subheader("Einstellbare Szene")
        feld_nummer = st.slider("W√§hle ein Feld (1‚Äì64)", min_value=1, max_value=64, value=32, step=1)
        
        # Berechnungen f√ºr die Schachbrett-Legende
        koerner_auf_feld = 2 ** (feld_nummer - 1)
        koerner_gesamt = 2 ** feld_nummer - 1 # Summe aller K√∂rner bis zu diesem Feld
        
        gewicht_pro_korn_g = 0.025 # Gramm
        gewicht_tonnen = koerner_gesamt * gewicht_pro_korn_g / 1_000_000 # Umrechnung von Gramm in Tonnen
        
        flaeche_pro_korn_cm2 = 0.3 # cm¬≤
        flaeche_m2 = koerner_gesamt * flaeche_pro_korn_cm2 / 10_000 # Umrechnung von cm¬≤ in m¬≤
        
        # Vergleichslisten f√ºr Metriken
        gewicht_vergleiche = [
            ("40-Tonnen-Lkw", 40), # 40 Tonnen
            ("Eiffelturm", 10_100), # 10.100 Tonnen
            ("Cheops-Pyramide", 5_750_000), # 5,75 Millionen Tonnen
            ("Weltreisproduktion (Jahr)", 520_000_000), # ca. 520 Millionen Tonnen (2023)
        ]
        flaechen_vergleiche = [
            ("Basketballfeld", 420), # ~420 m¬≤
            ("Frankfurter R√∂merberg", 7_000), # ~7.000 m¬≤
            ("Frankfurter Flughafen", 2_300_000), # ~2,3 Millionen m¬≤
        ]

    with col2:
        st.subheader(f"Feld {feld_nummer} im Fokus")
        
        # Anzeige der Metriken in einer strukturierten Weise
        metric_row = st.columns(3, gap="large")
        metric_row[0].metric("Reisk√∂rner auf dem Feld", human_number(koerner_auf_feld))
        metric_row[1].metric("Kumuliert bis Feld", human_number(koerner_gesamt))
        metric_row[2].metric("Gewicht (t)", human_number(gewicht_tonnen))
        
        caption_row = st.columns(3, gap="large")
        caption_row[0].caption(f"Exakt: {format_number(koerner_auf_feld)} K√∂rner")
        caption_row[1].caption(f"Exakt: {format_number(koerner_gesamt)} K√∂rner")
        caption_row[2].caption(f"Exakt: {format_number(gewicht_tonnen, 2)} t")
        
        metric_row2 = st.columns(2, gap="large")
        metric_row2[0].metric("Gewichtsvergleich", best_comparison(gewicht_tonnen, gewicht_vergleiche))
        metric_row2[1].metric("Fl√§chenbedarf", best_comparison(flaeche_m2, flaechen_vergleiche))
        
        caption_row2 = st.columns(2, gap="large")
        caption_row2[0].caption("Referenzen: 40 t ‚Äì 520 Mio. t (Weltreisproduktion)")
        caption_row2[1].caption("Referenzen: 420 m¬≤ (Basketballfeld) ‚Äì 2.3 Mio. m¬≤ (Flughafen)")
        
        st.caption("Der Gro√üteil des Reisbergs entsteht auf den letzten Feldern ‚Äì ein klassisches Merkmal exponentieller Prozesse.")
    
    with st.expander("Visualisierung & Details"):
        # DataFrame f√ºr die Plot-Erstellung
        df_chessboard = pd.DataFrame({
            "Feld": range(1, 65),
            "Reisk√∂rner": [2 ** (i - 1) for i in range(1, 65)],
            "Kumuliert": [2 ** i - 1 for i in range(1, 65)]
        })
        
        fig = px.line(
            df_chessboard[df_chessboard["Feld"] <= feld_nummer],
            x="Feld",
            y=["Reisk√∂rner", "Kumuliert"],
            labels={"value": "Anzahl der Reisk√∂rner", "variable": "Sicht"},
            title="Exponentielles Wachstum auf dem Schachbrett",
            log_y=True # Logarithmische Skala ist essentiell f√ºr die Darstellung exponentiellen Wachstums
        )
        fig.update_layout(
            legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
            hovermode="x unified" # Verbessert die Lesbarkeit beim Hovern √ºber mehrere Linien
        )
        st.plotly_chart(fig, use_container_width=True)
        st.info("Hinweis: Eine logarithmische Skala ist n√∂tig, um das enorme Wachstum auf den sp√§teren Feldern sichtbar zu machen. Auf einer linearen Skala w√§ren die fr√ºheren Felder kaum zu erkennen.")

# ------------------------------------------------------
# Tab 2: Zinseszins vs. Zeit (Compound Interest vs. Time)
# ------------------------------------------------------
with tab2:
    render_intro_card(
        "Frankfurt, Rooftop-Bar: Zwei Absolventen sto√üen auf ihren Karrierestart an. "
        "Beide haben gleich viel gespart ‚Äì doch nur eine Person hat ihre Zinsen stets reinvestiert. "
        "Im Abendlicht offenbart der Depotvergleich, wie stark Exponentialit√§t Verm√∂gen treibt."
    )
    render_cover_image(
        IMAGE_URLS["zinseszins"],
        "Der Zinseszins ist der leise Architekt beim Verm√∂gensaufbau."
    )
    render_story_card(
        """
        Lara l√§sst jeden Ertrag im Depot, Tim investiert gleich viel, g√∂nnt sich aber j√§hrlich die Zinsen.
        25 Jahre sp√§ter zeigt die Skyline, wie weit Exponentialit√§t Lara getragen hat ‚Äì Tims Depot blieb linear.
        """
    )
    
    col1, col2 = st.columns([1, 2], gap="large")
    with col1:
        st.subheader("Finanzielle Ausgangslage")
        startkapital = st.number_input("Startkapital (‚Ç¨)", min_value=0, max_value=500_000, value=5_000, step=500)
        sparrate = st.slider("Monatliche Sparrate (‚Ç¨)", min_value=0, max_value=5_000, value=400, step=50)
        laufzeit = st.slider("Laufzeit (Jahre)", min_value=5, max_value=50, value=25)
        zinssatz = st.slider("J√§hrlicher Zinssatz (%)", min_value=0.0, max_value=18.0, value=7.0, step=0.5)
        
        # Korrigierte Berechnungen f√ºr Zinseszins- und lineares Szenario
        jahre = list(range(laufzeit + 1))
        kapital_zinseszins = [float(startkapital)] # Laras Kapital (Zinseszins)
        kapital_lineares_sparen = [float(startkapital)] # Tims Kapital (lineares Sparen)
        eingezahlt_total = [float(startkapital)] # Summe der eigenen Einzahlungen (Start + Sparraten)
        
        for jahr in range(1, laufzeit + 1):
            # Laras Kapital: Vorheriges Kapital + j√§hrliche Sparrate * 12, dann Zins angewendet
            kapital_zinseszins.append((kapital_zinseszins[-1] + sparrate * 12) * (1 + zinssatz / 100))
            
            # Gesamte Eigenleistung bis zum aktuellen Jahr
            eingezahlt_total.append(float(startkapital + sparrate * 12 * jahr))
            
            # Tims Kapital: Startkapital + j√§hrliche Sparrate * 12 + einfache Zinsen auf Startkapital
            # Die Zinsen auf das Startkapital werden hier als "einfache Zinsen" (simple interest) betrachtet,
            # da Tim sich die j√§hrlichen Zinsen g√∂nnt und sie nicht reinvestiert.
            zinsen_einfach_tim = startkapital * (zinssatz / 100) * jahr
            kapital_lineares_sparen.append(float(startkapital + (sparrate * 12 * jahr) + zinsen_einfach_tim))

        endkapital_lara = kapital_zinseszins[-1]
        eigenleistung_kumuliert = eingezahlt_total[-1] # Gesamtes vom Nutzer eingezahltes Geld
        zinsgewinne_lara = endkapital_lara - eigenleistung_kumuliert
        
        endkapital_tim = kapital_lineares_sparen[-1]
        vorsprung_lara_vs_tim = endkapital_lara - endkapital_tim

    with col2:
        st.subheader("Verm√∂gensreise √ºber die Jahre")
        plot_df_finanzen = pd.DataFrame({
            "Jahr": jahre,
            "Zinseszins (Lara)": kapital_zinseszins,
            "Nur eingezahlt": eingezahlt_total,
            "Lineares Sparen (Tim)": kapital_lineares_sparen
        })
        
        fig = px.line(
            plot_df_finanzen,
            x="Jahr",
            y=["Zinseszins (Lara)", "Nur eingezahlt", "Lineares Sparen (Tim)"],
            labels={"value": "Kapital in ‚Ç¨", "variable": "Szenario"},
            title="Zinseszins vs. Lineares Sparen"
        )
        fig.update_layout(
            legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
            hovermode="x unified"
        )
        st.plotly_chart(fig, use_container_width=True)
        
        st.write("---")
        st.subheader(f"Bilanz nach {laufzeit} Jahren")
        cols = st.columns(4, gap="large")
        cols[0].metric("Gesamtverm√∂gen (Lara)", human_number(endkapital_lara))
        cols[1].metric("Eigenleistung (gesamt)", human_number(eigenleistung_kumuliert))
        cols[2].metric("Erarbeitete Zinsen", human_number(zinsgewinne_lara))
        cols[3].metric("Vorsprung gg√º. Tim", human_number(vorsprung_lara_vs_tim))
        
        cap_cols = st.columns(4, gap="large")
        cap_cols[0].caption(f"Exakt: {format_number(endkapital_lara, 2)} ‚Ç¨")
        cap_cols[1].caption(f"Exakt: {format_number(eigenleistung_kumuliert, 2)} ‚Ç¨")
        cap_cols[2].caption(f"Exakt: {format_number(zinsgewinne_lara, 2)} ‚Ç¨")
        cap_cols[3].caption(f"Exakt: {format_number(vorsprung_lara_vs_tim, 2)} ‚Ç¨")
        
        if zinsgewinne_lara > eigenleistung_kumuliert:
            st.success("Herzlichen Gl√ºckwunsch! Ihr Kapital arbeitet h√§rter als Ihre Einzahlungen ‚Äì die exponentielle Phase ist erreicht.")
        else:
            st.info("Noch √ºberwiegen die Eigenleistungen die Zinsgewinne. Bleiben Sie geduldig, mit der Zeit kehrt sich das Verh√§ltnis um!")

# ------------------------------------------------------
# Tab 3: Viraler Dominoeffekt (Viral Domino Effect)
# ------------------------------------------------------
with tab3:
    render_intro_card(
        "Ein Startup ver√∂ffentlicht seine nachhaltige Kreditkarte in Social Media. "
        "Ein einziger Post entfacht eine Kette: Jede Kundin √ºberzeugt weitere Freundinnen ‚Äì "
        "die Monitoring-Screens im Headquarter leuchten und das Support-Team kommt ins Schwitzen."
    )
    render_cover_image(
        IMAGE_URLS["viral"],
        "Wenn eine Idee den Nerv trifft, vervielfacht sie sich in Wellen."
    )
    render_story_card(
        """
        <p>Die Kampagne trifft einen Nerv: Jeder neue Kunde bringt durchschnittlich 1,7 weitere mit.</p>
        <p>In wenigen Wellen schie√üt die Nutzung durch die Decke ‚Äì Netzwerkeffekte in Reinform.</p>
        """
    )
    
    col1, col2 = st.columns([1, 2], gap="large")
    with col1:
        st.subheader("Netzwerk-Dynamik")
        starter_personen = st.number_input("Initiale Personen", min_value=1, max_value=1_000, value=50, step=10)
        multiplikator = st.slider("Multiplikator pro Welle", min_value=0.5, max_value=5.0, value=1.7, step=0.1)
        anzahl_wellen = st.slider("Anzahl Wellen", min_value=1, max_value=40, value=15)
        
        runden_liste = list(range(1, anzahl_wellen + 1))
        neu_erreicht_pro_runde = []
        kumulativ_erreicht = []
        
        total_erreicht_kumuliert = 0

        for i in range(anzahl_wellen):
            # Die exponentielle Formel f√ºr die Anzahl der Personen in Welle 'i' (beginnend bei 0)
            # Welle 0 (oder 1 im UI): starter_personen * (multiplikator^0) = starter_personen
            # Welle 1 (oder 2 im UI): starter_personen * (multiplikator^1)
            # usw.
            personen_in_aktueller_welle = starter_personen * (multiplikator ** i) 
            
            neu_erreicht_pro_runde.append(personen_in_aktueller_welle)
            total_erreicht_kumuliert += personen_in_aktueller_welle
            kumulativ_erreicht.append(total_erreicht_kumuliert)
        
        gesamt_personen_erreicht = kumulativ_erreicht[-1] if kumulativ_erreicht else 0
        personen_letzte_welle = neu_erreicht_pro_runde[-1] if neu_erreicht_pro_runde else 0
        anteil_letzte_welle_gesamt = personen_letzte_welle / gesamt_personen_erreicht if gesamt_personen_erreicht else 0
        
        vergleich_pop = [
            ("Deutsche Bank Park", 51_500), # Stadionkapazit√§t
            ("Stadt Frankfurt", 771_000), # Einwohnerzahl Frankfurt
            ("Region Rhein-Main", 5_800_000), # Einwohnerzahl Rhein-Main
            ("Deutschland", 84_000_000), # Einwohnerzahl Deutschland
        ]

    with col2:
        st.subheader("Ausbreitung pro Welle")
        viral_df = pd.DataFrame({
            "Runde": runden_liste,
            "Neu erreicht": neu_erreicht_pro_runde,
            "Gesamt erreicht": kumulativ_erreicht
        })
        
        fig = px.bar(
            viral_df,
            x="Runde",
            y="Neu erreicht",
            title="Neu erreichte Personen pro Welle",
            labels={"Neu erreicht": "Anzahl Personen"}
        )
        fig.update_traces(marker_color="#00c6ff")
        fig.update_layout(hovermode="x unified")
        st.plotly_chart(fig, use_container_width=True)
        
        st.write("---")
        st.subheader("Resultierende Reichweite")
        cols = st.columns(3, gap="large")
        cols[0].metric("Gesamt erreicht", human_number(gesamt_personen_erreicht))
        cols[1].metric("Vergleich", best_comparison(gesamt_personen_erreicht, vergleich_pop))
        cols[2].metric("Anteil letzte Welle", f"{anteil_letzte_welle_gesamt:.0%}")
        
        cap_cols = st.columns(3, gap="large")
        cap_cols[0].caption(f"Exakt: {format_number(gesamt_personen_erreicht, 0)} Personen")
        cap_cols[1].caption("Vergleiche: Stadion ‚Äì Nation")
        cap_cols[2].caption("Anteil am gesamten Wachstum")
        
        if multiplikator <= 1:
            st.warning("Achtung: Ein Multiplikator von ‚â§ 1 bedeutet, dass der Trend ausl√§uft und sich nicht exponentiell verbreitet. Exponentielles Momentum beginnt erst jenseits von 1.")
        else:
            st.caption("Ein gro√üer Teil der Gesamtlast (z.B. f√ºr Support oder Infrastruktur) f√§llt oft in die letzten Wellen ‚Äì eine vorausschauende Planung ist entscheidend.")

# ------------------------------------------------------
# Tab 4: SaaS-Hypergrowth (SaaS Hypergrowth)
# ------------------------------------------------------
with tab4:
    render_intro_card(
        "Pitch-Deck im Boardroom: Das junge SaaS-Team zeigt 12‚ÄØ% monatliches Wachstum. "
        "Ein Investor hebt die Augenbrauen ‚Äì denn 12‚ÄØ% im Monat bedeutet eine Verdopplung in sechs Monaten. "
        "Cashflow, Server, Hiring ‚Äì alles muss in exponentiellen Kategorien gedacht werden."
    )
    render_cover_image(
        IMAGE_URLS["saas"],
        "Wenn Product-Market-Fit trifft, rast das Wachstum wie eine Rakete."
    )
    render_story_card(
        """
        <p>Der 3D-holografische MRR-Chart schie√üt wie eine Rakete nach oben.</p>
        <p>Das Team sp√ºrt: Jetzt entscheidet die F√§higkeit, exponentielles Wachstum zu managen ‚Äì nicht nur zu w√ºnschen.</p>
        """
    )
    
    col1, col2 = st.columns([1, 2], gap="large")
    with col1:
        st.subheader("Monatliche Kennzahlen")
        start_mrr = st.number_input("Startumsatz (MRR in ‚Ç¨)", min_value=1_000, max_value=1_000_000, value=25_000, step=1_000)
        monatliche_wachstumsrate = st.slider("Monatliches Wachstum (%)", min_value=0.0, max_value=35.0, value=12.0, step=0.5)
        monate_planungszeitraum = st.slider("Planungszeitraum (Monate)", min_value=6, max_value=60, value=36, step=6)
        lineares_ziel_delta_mrr = st.slider("Lineares Monatsziel (Œî MRR)", min_value=0, max_value=200_000, value=10_000, step=1_000)
        
        monate_liste = list(range(monate_planungszeitraum + 1))
        mrr_exponentiell = [float(start_mrr)] # Exponentielles Wachstum
        mrr_linear = [float(start_mrr)] # Lineares Wachstum
        
        for m in range(1, monate_planungszeitraum + 1):
            mrr_exponentiell.append(mrr_exponentiell[-1] * (1 + monatliche_wachstumsrate / 100))
            mrr_linear.append(start_mrr + lineares_ziel_delta_mrr * m) # Lineares Wachstum addiert einen festen Betrag
            
        gesamt_mrr_exponentiell = mrr_exponentiell[-1]
        gesamt_mrr_linear = mrr_linear[-1]
        
        kumulatives_wachstum_gesamt = gesamt_mrr_exponentiell - start_mrr
        
        # Wachstum im letzten Monat des Planungszeitraums
        zuwachs_letzter_monat = mrr_exponentiell[-1] - mrr_exponentiell[-2] if len(mrr_exponentiell) > 1 else 0
        anteil_zuwachs_letzter_monat = zuwachs_letzter_monat / kumulatives_wachstum_gesamt if kumulatives_wachstum_gesamt > 0 else 0
        
        st.subheader("Personalplanung")
        team_aktuelle_fte = st.slider("Aktuelle FTE (Full-Time Equivalents)", min_value=3, max_value=200, value=12)
        mrr_pro_fte_produktivitaet = st.slider("MRR pro FTE (‚Ç¨/Monat)", min_value=1_000, max_value=30_000, value=12_000, step=1_000)
        
        erforderliche_fte_am_ende = gesamt_mrr_exponentiell / mrr_pro_fte_produktivitaet
        
        # Wie viele zus√§tzliche FTEs werden ben√∂tigt, um das exponentielle Wachstum zu bew√§ltigen
        zus_fte_benoetigt = max(erforderliche_fte_am_ende - team_aktuelle_fte, 0)

    with col2:
        st.subheader("MRR-Prognose: exponentiell vs. linear")
        saas_df = pd.DataFrame({
            "Monat": monate_liste,
            "Exponentielles Wachstum": mrr_exponentiell,
            "Lineares Ziel": mrr_linear
        })
        
        fig = px.line(
            saas_df,
            x="Monat",
            y=["Exponentielles Wachstum", "Lineares Ziel"],
            labels={"value": "MRR in ‚Ç¨", "variable": "Szenario"},
            title="Monatlich wiederkehrender Umsatz (MRR) Entwicklung"
        )
        fig.update_layout(
            legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
            hovermode="x unified"
        )
        st.plotly_chart(fig, use_container_width=True)
        
        st.write("---")
        st.subheader("Investor-Ready KPIs")
        cols = st.columns(4, gap="large")
        cols[0].metric("MRR nach Plan", human_number(gesamt_mrr_exponentiell))
        cols[1].metric("Lineares Ziel (MRR)", human_number(gesamt_mrr_linear))
        cols[2].metric("Zus√§tzliche FTE ben√∂tigt", human_number(zus_fte_benoetigt))
        cols[3].metric("Wachstum im letzten Monat", f"{anteil_zuwachs_letzter_monat:.0%}")
        
        cap_cols = st.columns(4, gap="large")
        cap_cols[0].caption(f"Exakt: {format_number(gesamt_mrr_exponentiell, 0)} ‚Ç¨")
        cap_cols[1].caption(f"Exakt: {format_number(gesamt_mrr_linear, 0)} ‚Ç¨")
        cap_cols[2].caption(f"Gesamtbedarf: {format_number(erforderliche_fte_am_ende, 1)} FTE")
        cap_cols[3].caption("Anteil am kumulierten Wachstum im Planzeitraum")
        
        if monatliche_wachstumsrate <= 0:
            st.warning("Ein monatliches Wachstum von ‚â§ 0% bedeutet Stagnation oder R√ºckgang. Exponentielles Wachstum erfordert positive Raten.")
        else:
            st.caption("Ein erheblicher Teil des Gesamtwachstums f√§llt in die letzten Monate des Planungszeitraums ‚Äì Hypergrowth erfordert proaktive Planung in allen Unternehmensbereichen.")

# ------------------------------------------------------
# Abschluss (Conclusion)
# ------------------------------------------------------
st.markdown("---")
st.markdown(
    """
    <div class="footer-message">
        Exponentielle Prozesse belohnen Geduld, Systematik und Vorbereitung.
        Wer sie untersch√§tzt, verliert Kontrolle ‚Äì wer sie gestaltet, gewinnt Zukunft.
    </div>
    """,
    unsafe_allow_html=True
)
